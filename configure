#!/bin/bash
# Ricardo L. Gon√ßalves 2021/01 
#
# Simple is better. 
#

#Debug script
#set -xv

# Defaults
LUA="luajit"
DEBUG=""
MEM=""
CC="/usr/bin/gcc"
#CC=$(which gcc clang | tail -n1)
#OPTS="-Wno-format -pedantic -Wpedantic -Wunused-macros"
OPTS="-std=c11 -Wpedantic -pedantic"
PWD=$(pwd)
GE=ge


# pharsing parameters
while [ 1 ] ; do
   PAR="$1"

   case "X$PAR" in
   
     "X")
       break
       ;;
     
     "X--help" | "X-h" | "X-help")
       echo "Syntax:"
       echo "./configure <parameters> <extra (gcc/clang) parameters>"
       echo ""
       echo "Parameters:"
       echo " -h,-help,--help  - This help message."
       echo " -c,--compiler [gcc|clang|mingw|emcc]  - Select compiler."
       echo " -d,--debug  - Enable debug mode."
       echo " --no-debug - Disable debug mode."
       echo " -l,--lua [luajit|lua51|lua53]  - Select LUA version."
       echo " -m,--mem # Debug memory leak (sanitizer)."
       echo " --no-mem  - Disable sanitizer memory leak debug."
       echo ""
       echo " * Note: all gcc and clang parameters are supported."
       exit 0
       ;;
     
     "X--lua" | "X-l")
		   echo PAR:$PAR
       shift
       LUA=$1
       echo LUA=$LUA
       ;;
     
     "X--mem" | "X-m")
		  echo PAR:$PAR
       shift
       MEM="-fsanitize=address -fno-omit-frame-pointer -O3"
       #ASAN_OPTIONS=strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
       #DEBUG="-g -fsanitize=address -fno-omit-frame-pointer -fsanitize-address-use-after-scope -O3"
       ;;
     
     "X--no-mem") 
		  echo PAR:$PAR
       shift
       MEM=""
       ;;
     
     "X--debug" | "X-d")
		  echo PAR:$PAR
       shift
       DEBUG="-g"
       ;;
     
     "X--no-debug")
		  echo PAR:$PAR
       shift
       DEBUG=""
       ;;
     
     "X--no-log" | "X-l")
		  echo PAR:$PAR
       shift
       OPTS="$OPTS -DNOLOG"
       ;;

     "X--compiler" | "X-c")
		  echo PAR:$PAR
       shift
       if [ "X$(echo $1 | grep mingw)" != "X" ] ; then
          echo CROSS PARAMS
          DEST=windows
          CC=/usr/bin/x86_64-w64-mingw32-gcc
          INCLUDES="-I WINLIBS/mingw64/include -I WINLIBS/SDL2-2.0.16/x86_64-w64-mingw32/include -I WINLIBS/SDL2-2.0.16/x86_64-w64-mingw32/include/SDL2 -I WINLIBS/SDL2_image-2.0.5/x86_64-w64-mingw32/include -I WINLIBS/SDL2_mixer-2.0.4/x86_64-w64-mingw32/include -I WINLIBS/SDL2_ttf-2.0.15/x86_64-w64-mingw32/include"
          LIBS="-pthread -mwindows -lmingw32 -lSDL2main -lSDL2 -lSDL2_image -lSDL2_ttf -lSDL2_mixer -lm -g -L WINLIBS/SDL2-2.0.16/x86_64-w64-mingw32/lib -L WINLIBS/SDL2-2.0.16/x86_64-w64-mingw32/lib -L WINLIBS/SDL2_image-2.0.5/x86_64-w64-mingw32/lib -L WINLIBS/SDL2_image-2.0.5/x86_64-w64-mingw32/lib -L WINLIBS/SDL2_mixer-2.0.4/x86_64-w64-mingw32/lib -L WINLIBS/SDL2_mixer-2.0.4/x86_64-w64-mingw32/lib -L WINLIBS/SDL2_ttf-2.0.15/x86_64-w64-mingw32/lib -L WINLIBS/SDL2_ttf-2.0.15/x86_64-w64-mingw32/lib -W WINLIBS/lua51.dll"
          cd WINLIBS
          ./configcross.sh
          cd ../
       else
	 if [ "X$(echo $1 | grep emcc)" != "X" ] ; then
            DEST=web
            CC=${PWD}/WEB/emsdk/upstream/emscripten/emcc
            INCLUDES="-g -I src -I WEB/emsdk/upstream/emscripten/cache/sysroot/include -I WEB/lualib/include -I WEB/emsdk/upstream/emscripten/system/include -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_TTF=2 -s USE_SDL_MIXER=2 -s SDL2_IMAGE_FORMATS='["png"]' -s MAIN_MODULE=0 -fPIC -DNOLOG"
	          LIBS="-s MODULARIZE=0 -s EXPORTED_RUNTIME_METHODS=\[ccall\] -s LINKABLE=1 -s EXPORT_ALL=1 -lm -llua -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_TTF=2 -s USE_SDL_MIXER=2 -s SDL2_IMAGE_FORMATS='["png"]' --preload-file WEB/ASSETS/@/ -I src -I WEB/lualib/include -L WEB/lualib/lib -L WEB/emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten/libSDL2_ttf.a -s LLD_REPORT_UNDEFINED -s ALLOW_MEMORY_GROWTH=1 -DNOLOG"
	 else
            DEST=linux
            if [ "X$(echo $1 | grep clang)" != "X" ] ; then
               CC=$(which clang)
               OPTS="$OPTS -Wno-macro-redefined"
            fi
            if [ "X$(echo $1 | grep gcc)" != "X" ] ; then
              CC=$(which gcc)
              OPTS="$OPTS -fcompare-debug-second"
            fi
	 fi
       fi
       ;;

       *)
         echo "PAR:$PAR"
         ;;
   
   esac
   
   shift
	 echo shift... 

done

if [ "$DEST" == "linux" ]; then
echo LINUX COMPILE
echo LUA: $LUA
if [ $LUA == "luajit" ]; then
  INCLUDES="-I /usr/include/luajit-2.1/"
  PLIBS=$LUA
fi
if [ $LUA == "lua51" ]; then
  INCLUDES="-I /usr/include/lua5.1/"
  PLIBS=$LUA
fi
if [ $LUA == "lua53" ]; then
  INCLUDES="-I /usr/include/lua5.3/"
  PLIBS=$LUA
fi
PLIBS="$PLIBS sdl2 SDL2_image SDL2_ttf SDL2_mixer"
cat<<EOF>config.mk
CC=$CC
GE=ge
CFLAGS= $(pkg-config --cflags $PLIBS) $DEBUG $MEM $INCLUDES $OPTS 
LIBS=-pthread $(pkg-config --libs $PLIBS) -lm $DEBUG $MEM $LIBS $OPTS 
EOF
fi

if [ $DEST == "windows" ] ; then
echo WINDOWS 
cat<<EOF>config.mk
CC=$CC
GE=ge.exe
CFLAGS= $INCLUDES $OPTS
LIBS=-pthread -lm $LIBS $OPTS 
EOF
fi

if [ $DEST == "web" ] ; then

cat<<EOF>config.mk
CC=$CC
GE=WEB/ASSETS/ge.html
CFLAGS= $INCLUDES -Wno-macro-redefined
LIBS=$LIBS 
EOF
cd WEB
./configcross.sh
fi
make clean

